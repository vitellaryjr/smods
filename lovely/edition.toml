[manifest]
version = "1.0.0"
dump_lua = true
priority = -10

# Fix debug mode edition cycling
[[patches]]
[patches.regex]
target = "engine/controller.lua"
pattern = '''
(?<indent>[\t ]*)local _edition = \{
[\t ]*foil = not _card\.edition,
[\t ]*holo = _card\.edition and _card\.edition\.foil,
[\t ]*polychrome = _card\.edition and _card\.edition\.holo,
[\t ]*negative = _card\.edition and _card\.edition\.polychrome,
[\t ]*\}'''
position = "at"
payload = '''
local found_index = 1
if _card.edition then
    for i, v in ipairs(G.P_CENTER_POOLS.Edition) do
        if v.key == _card.edition.key then
            found_index = i
            break
        end
    end
end
found_index = found_index + 1
if found_index > #G.P_CENTER_POOLS.Edition then found_index = found_index - #G.P_CENTER_POOLS.Edition end
local _edition = G.P_CENTER_POOLS.Edition[found_index].key'''
line_prepend = "$indent"


# Sort P_CENTER_POOLS["Editions"]
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'table.sort(self.P_CENTER_POOLS["Enhanced"], function (a, b) return a.order < b.order end)'
position = 'after'
payload = 'table.sort(self.P_CENTER_POOLS["Edition"], function (a, b) return a.order < b.order end)'
match_indent = true


# generate_card_ui()
# Adds tooltips for all editions
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = '''
(?<indent>[\t ]*)if v == 'foil' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_foil'\] end
[\t ]*if v == 'holographic' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_holo'\] end
[\t ]*if v == 'polychrome' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_polychrome'\] end
[\t ]*if v == 'negative' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_negative'\] end
[\t ]*if v == 'negative_consumable' then info_queue\[#info_queue\+1\] = \{key = 'e_negative_consumable', set = 'Edition', config = \{extra = 1\}\} end'''
position = 'at'
payload = '''
v = (v == 'holographic' and 'holo' or v)
if v:sub(1,9) == 'negative_' then
    info_queue[#info_queue+1] = {key = 'e_'..v, set = 'Edition', config = {extra = G.P_CENTERS['e_negative'].config.card_limit}}
end
if G.P_CENTERS[v] and G.P_CENTERS[v].set == 'Edition' then
    info_queue[#info_queue + 1] = G.P_CENTERS[v]
end
if G.P_CENTERS['e_'..v] and G.P_CENTERS['e_'..v].set == 'Edition' then
    local t = {key = 'e_'..v, set = 'Edition', config = {}}
    info_queue[#info_queue + 1] = t
    if G.P_CENTERS['e_'..v].loc_vars and type(G.P_CENTERS['e_'..v].loc_vars) == 'function' then
        local res = G.P_CENTERS['e_'..v]:loc_vars(info_queue, card) or {}
        t.vars = res.vars
        t.key = res.key or t.key
        t.set = res.set or t.set
    end
end'''
line_prepend = "$indent"
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}'''
position = 'at'
match_indent = true
payload = '''localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = _c.vars or loc_vars}'''


# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for _, v in ipairs(G.P_CENTER_POOLS.Edition) do
	G.BADGE_COL[v.key:sub(3)] = v.badge_colour
end'''

# Remove prefix from shader key when calling send()
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = "if _send then G.SHADERS[_shader or 'dissolve']:send(_shader,_send) end"
position = "at"
payload = '''
if _send then
    G.SHADERS[_shader or 'dissolve']:send((SMODS.Shaders[_shader or 'dissolve'] and SMODS.Shaders[_shader or 'dissolve'].original_key) or _shader,_send)
end'''
match_indent = true

# Inject change to edition cost in shop
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '(?<indent>[\t ]*)self.ex([a-z._\s=+(0-9)]*)\n([\t ]*)([a-z._\s=+(0-9)]*)or 0\)'
position = "at"
payload = '''
for k, v in pairs(G.P_CENTER_POOLS.Edition) do
    if self.edition[v.key:sub(3)] then
        if v.extra_cost then
            self.extra_cost = self.extra_cost + v.extra_cost
        end
    end
end'''
line_prepend = "$indent"

## Fix card_limit logic
# Card:add_to_deck()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)if self\.edition[A-z\.\:\n\t _(',)~=+\-0-9]*limit \+ 1'''
position = "at"
payload = '''
if true then
    if from_debuff then
        self.ability.joker_added_to_deck_but_debuffed = nil
    else
        if self.edition and self.edition.card_limit then
            if self.ability.consumeable then
                G.consumeables.config.card_limit = G.consumeables.config.card_limit + self.edition.card_limit
            else
                G.jokers.config.card_limit = G.jokers.config.card_limit + self.edition.card_limit
            end'''
line_prepend = "$indent"
# Card:remove_from_deck()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)if self\.edition[A-z\.\:\n\t _(',)~=+\-0-9]*limit \- 1'''
position = "at"
payload = '''
if G.jokers then
    if from_debuff then
        self.ability.joker_added_to_deck_but_debuffed = true
    else
        if self.edition and self.edition.card_limit then
            if self.ability.consumeable then
                G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit
            elseif self.ability.set == 'Joker' then
                G.jokers.config.card_limit = G.jokers.config.card_limit - self.edition.card_limit
            end'''
line_prepend = "$indent"
# Card:remove()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)if self\.ability\.queue_neg[A-z\.\:\n\t _(',)~=+\-0-9]*limit \- 1'''
position = "at"
payload = '''
if self.ability.joker_added_to_deck_but_debuffed then
    if self.edition and self.edition.card_limit then
        if self.ability.consumeable then
            G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit
        elseif self.ability.set == 'Joker' then
            G.jokers.config.card_limit = G.jokers.config.card_limit - self.edition.card_limit
        end'''
line_prepend = "$indent"
# Card:save()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "added_to_deck = self.added_to_deck,"
position = "after"
payload = "joker_added_to_deck_but_debuffed = self.joker_added_to_deck_but_debuffed,"
match_indent = true

## Buying card_limit cards fix
# G.FUNCS.check_for_buy_space
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "    not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) then"
position = "at"
match_indent = true
payload = '''
    not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + (card.edition and card.edition.card_limit or 0)) then
'''
times = 1

# G.FUNCS.check_for_buy_space
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "not (card.ability.set == 'Joker' and #G.jokers.cards < G.jokers.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) and"
position = "at"
match_indent = true
payload = '''
    not (card.ability.set == 'Joker' and #G.jokers.cards < G.jokers.config.card_limit + (card.edition and card.edition.card_limit or 0)) and
'''
times = 1

## Negative playing card logic
# CardArea:emplace()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "function CardArea:emplace(*"
position = "after"
payload = '''
    if not card.debuff and card.edition and card.edition.card_limit and (self == G.hand) then
        self.config.real_card_limit = (self.config.real_card_limit or self.config.card_limit) + card.edition.card_limit
        self.config.card_limit = math.max(0, self.config.real_card_limit)
    end'''
match_indent = true
# CardArea:remove_card()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "card:remove_from_area()"
position = "before"
payload = '''
if not card.debuff and card.edition and card.edition.card_limit and (self == G.hand) then
    self.config.real_card_limit = (self.config.real_card_limit or self.config.card_limit) - card.edition.card_limit
    self.config.card_limit = math.max(0, self.config.real_card_limit)
end'''
match_indent = true

# G.FUNCS.draw_from_deck_to_hand()
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local hand_space = e or*"
position = "at"
payload = """local hand_space = e
if not hand_space then
    local limit = G.hand.config.card_limit - #G.hand.cards
    local n = 0
    while n < #G.deck.cards do
        local card = G.deck.cards[#G.deck.cards-n]
        limit = limit - 1 + (not card.debuff and card.edition and card.edition.card_limit or 0)
        if limit < 0 then break end
        n = n + 1
    end
    hand_space = n
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "badges[#badges + 1] = 'negative_consumable'"
position = "after"
payload = """
elseif self.edition.type == 'negative' and (self.ability.set == 'Enhanced' or self.ability.set == 'Default') then
    badges[#badges + 1] = 'negative_playing_card'"""
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = "love.graphics.setShader( G.SHADERS[_shader or 'dissolve'],  G.SHADERS[_shader or 'dissolve'])"
position = "before"
payload = '''
local p_shader = SMODS.Shader.obj_table[_shader or 'dissolve']
if p_shader and type(p_shader.send_vars) == "function" then
    local sh = G.SHADERS[_shader or 'dissolve']
    local parent_card = self.role.major and self.role.major:is(Card) and self.role.major
    local send_vars = p_shader.send_vars(self, parent_card)

    if type(send_vars) == "table" then
        for key, value in pairs(send_vars) do
            sh:send(key, value)
        end
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if v == 'negative_consumable' then v = 'negative' end"
position = "at"
payload = '''if v == 'negative_consumable' or v == 'negative_playing_card' then v = 'negative' end'''
match_indent = true

#
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = '''(?<indent>[\t ]*)(?<edi>local edition = poll_edition\('edi'\.\.\(key_append or ''\)\.\.G\.GAME\.round_resets\.ante\)(\n.*){2})'''
position = 'at'
line_prepend = '$indent'
payload = '''
if not SMODS.bypass_create_card_edition and not card.edition then
    $edi
end'''
